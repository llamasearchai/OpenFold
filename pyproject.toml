[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "openfold"
version = "2.0.0"
description = "Advanced Biomolecule Structure Prediction Platform"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
maintainers = [
    {name = "LlamaSearch AI Team", email = "nikjois@llamasearch.ai"},
]
keywords = [
    "protein folding",
    "structure prediction",
    "bioinformatics",
    "machine learning",
    "alphafold",
    "computational biology"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "torch>=2.1.2",
    "numpy>=1.26.2",
    "biopython>=1.82",
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.2",
    "openai>=1.6.1",
    "rich>=13.7.0",
    "click>=8.1.7",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "isort>=5.13.2",
    "flake8>=6.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]
gpu = [
    "torch[cuda]>=2.1.2",
    "jax[cuda]>=0.4.23",
]

[project.urls]
Homepage = "https://github.com/llamasearchai/OpenFold"
Documentation = "https://openfold.readthedocs.io"
Repository = "https://github.com/llamasearchai/OpenFold.git"
Issues = "https://github.com/llamasearchai/OpenFold/issues"
Changelog = "https://github.com/llamasearchai/OpenFold/blob/main/CHANGELOG.md"

[project.scripts]
openfold = "run:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "api*", "tests*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "api", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "Bio.*",
    "transformers.*",
    "torch.*",
    "jax.*",
    "flax.*",
    "optax.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["core", "api"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"] 